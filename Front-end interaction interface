import cv2
import tkinter as tk
from PIL import Image, ImageTk

# 加载人脸检测器和人脸识别器
face_detector = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
face_recognizer = cv2.face.LBPHFaceRecognizer_create()

# 加载预先训练好的人脸识别模型
face_recognizer.read('face_model.xml')

# 创建Tkinter窗口
root = tk.Tk()
root.title("人脸识别系统")

# 创建显示图像的Canvas组件
canvas = tk.Canvas(root, width=640, height=480)
canvas.pack()

# 创建实时视频显示函数
def show_video():
    # 打开摄像头
    cap = cv2.VideoCapture(0)
    
    while True:
        # 从摄像头读取一帧图像
        ret, frame = cap.read()

        # 将图像转换为灰度图像
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # 检测人脸
        faces = face_detector.detectMultiScale(gray, scaleFactor=1.2, minNeighbors=5, minSize=(30, 30))

        # 遍历每个检测到的人脸
        for (x, y, w, h) in faces:
            # 绘制人脸框
            cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

            # 提取人脸区域并将其转换为灰度图像
            face_roi = gray[y:y+h, x:x+w]

            # 进行人脸识别
            label, confidence = face_recognizer.predict(face_roi)

            # 显示识别结果
            if confidence < 100:
                text = "姓名: " + str(label)
            else:
                text = "未识别"

            cv2.putText(frame, text, (x, y-20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

        # 将图像转换为PIL图像并在Canvas组件中显示
        img = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
        img_tk = ImageTk.PhotoImage(image=img)
        canvas.create_image(0, 0, anchor=tk.NW, image=img_tk)
        
        # 延迟10毫秒并更新窗口
        root.after(10, show_video)

# 启动实时视频显示函数
show_video()

# 运行Tkinter窗口
root.mainloop()
